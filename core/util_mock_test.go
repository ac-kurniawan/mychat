// Code generated by MockGen. DO NOT EDIT.
// Source: core/util.go
//
// Generated by this command:
//
//	mockgen -source core/util.go -destination core/util_mock_test.go -package core
//
// Package core is a generated GoMock package.
package core

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIUtil is a mock of IUtil interface.
type MockIUtil struct {
	ctrl     *gomock.Controller
	recorder *MockIUtilMockRecorder
}

// MockIUtilMockRecorder is the mock recorder for MockIUtil.
type MockIUtilMockRecorder struct {
	mock *MockIUtil
}

// NewMockIUtil creates a new mock instance.
func NewMockIUtil(ctrl *gomock.Controller) *MockIUtil {
	mock := &MockIUtil{ctrl: ctrl}
	mock.recorder = &MockIUtilMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUtil) EXPECT() *MockIUtilMockRecorder {
	return m.recorder
}

// EndTrace mocks base method.
func (m *MockIUtil) EndTrace(span any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EndTrace", span)
}

// EndTrace indicates an expected call of EndTrace.
func (mr *MockIUtilMockRecorder) EndTrace(span any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndTrace", reflect.TypeOf((*MockIUtil)(nil).EndTrace), span)
}

// LogError mocks base method.
func (m *MockIUtil) LogError(ctx context.Context, err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LogError", ctx, err)
}

// LogError indicates an expected call of LogError.
func (mr *MockIUtilMockRecorder) LogError(ctx, err any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogError", reflect.TypeOf((*MockIUtil)(nil).LogError), ctx, err)
}

// LogInfo mocks base method.
func (m *MockIUtil) LogInfo(ctx context.Context, message string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LogInfo", ctx, message)
}

// LogInfo indicates an expected call of LogInfo.
func (mr *MockIUtilMockRecorder) LogInfo(ctx, message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogInfo", reflect.TypeOf((*MockIUtil)(nil).LogInfo), ctx, message)
}

// StartTrace mocks base method.
func (m *MockIUtil) StartTrace(ctx context.Context, traceName string) (context.Context, any) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartTrace", ctx, traceName)
	ret0, _ := ret[0].(context.Context)
	ret1, _ := ret[1].(any)
	return ret0, ret1
}

// StartTrace indicates an expected call of StartTrace.
func (mr *MockIUtilMockRecorder) StartTrace(ctx, traceName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartTrace", reflect.TypeOf((*MockIUtil)(nil).StartTrace), ctx, traceName)
}

// TraceError mocks base method.
func (m *MockIUtil) TraceError(span any, err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "TraceError", span, err)
}

// TraceError indicates an expected call of TraceError.
func (mr *MockIUtilMockRecorder) TraceError(span, err any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TraceError", reflect.TypeOf((*MockIUtil)(nil).TraceError), span, err)
}
