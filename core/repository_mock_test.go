// Code generated by MockGen. DO NOT EDIT.
// Source: core/repository.go
//
// Generated by this command:
//
//	mockgen -source core/repository.go -destination core/repository_mock_test.go -package core
//
// Package core is a generated GoMock package.
package core

import (
	context "context"
	reflect "reflect"

	model "github.com/ac-kurniawan/mychat/core/model"
	gomock "go.uber.org/mock/gomock"
)

// MockIChatDB is a mock of IChatDB interface.
type MockIChatDB struct {
	ctrl     *gomock.Controller
	recorder *MockIChatDBMockRecorder
}

// MockIChatDBMockRecorder is the mock recorder for MockIChatDB.
type MockIChatDBMockRecorder struct {
	mock *MockIChatDB
}

// NewMockIChatDB creates a new mock instance.
func NewMockIChatDB(ctrl *gomock.Controller) *MockIChatDB {
	mock := &MockIChatDB{ctrl: ctrl}
	mock.recorder = &MockIChatDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIChatDB) EXPECT() *MockIChatDBMockRecorder {
	return m.recorder
}

// GetParticipantGroupsByParticipant mocks base method.
func (m *MockIChatDB) GetParticipantGroupsByParticipant(ctx context.Context, participant string) ([]model.ParticipantGroupModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetParticipantGroupsByParticipant", ctx, participant)
	ret0, _ := ret[0].([]model.ParticipantGroupModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetParticipantGroupsByParticipant indicates an expected call of GetParticipantGroupsByParticipant.
func (mr *MockIChatDBMockRecorder) GetParticipantGroupsByParticipant(ctx, participant any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParticipantGroupsByParticipant", reflect.TypeOf((*MockIChatDB)(nil).GetParticipantGroupsByParticipant), ctx, participant)
}

// GetRoomChatByParticipant mocks base method.
func (m *MockIChatDB) GetRoomChatByParticipant(ctx context.Context, participant string, sessionStatus *string, initialChatNumber uint) ([]model.RoomChatModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoomChatByParticipant", ctx, participant, sessionStatus, initialChatNumber)
	ret0, _ := ret[0].([]model.RoomChatModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoomChatByParticipant indicates an expected call of GetRoomChatByParticipant.
func (mr *MockIChatDBMockRecorder) GetRoomChatByParticipant(ctx, participant, sessionStatus, initialChatNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoomChatByParticipant", reflect.TypeOf((*MockIChatDB)(nil).GetRoomChatByParticipant), ctx, participant, sessionStatus, initialChatNumber)
}

// GetRoomChatByParticipantGroups mocks base method.
func (m *MockIChatDB) GetRoomChatByParticipantGroups(ctx context.Context, participantGroups []string, sessionStatus *string, initialChatNumber uint) ([]model.RoomChatModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoomChatByParticipantGroups", ctx, participantGroups, sessionStatus, initialChatNumber)
	ret0, _ := ret[0].([]model.RoomChatModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoomChatByParticipantGroups indicates an expected call of GetRoomChatByParticipantGroups.
func (mr *MockIChatDBMockRecorder) GetRoomChatByParticipantGroups(ctx, participantGroups, sessionStatus, initialChatNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoomChatByParticipantGroups", reflect.TypeOf((*MockIChatDB)(nil).GetRoomChatByParticipantGroups), ctx, participantGroups, sessionStatus, initialChatNumber)
}

// GetRoomChatBySessionId mocks base method.
func (m *MockIChatDB) GetRoomChatBySessionId(ctx context.Context, sessionid string, sessionStatus *string, initialChatNumber uint) (*model.RoomChatModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoomChatBySessionId", ctx, sessionid, sessionStatus, initialChatNumber)
	ret0, _ := ret[0].(*model.RoomChatModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoomChatBySessionId indicates an expected call of GetRoomChatBySessionId.
func (mr *MockIChatDBMockRecorder) GetRoomChatBySessionId(ctx, sessionid, sessionStatus, initialChatNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoomChatBySessionId", reflect.TypeOf((*MockIChatDB)(nil).GetRoomChatBySessionId), ctx, sessionid, sessionStatus, initialChatNumber)
}

// MockIRepository is a mock of IRepository interface.
type MockIRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIRepositoryMockRecorder
}

// MockIRepositoryMockRecorder is the mock recorder for MockIRepository.
type MockIRepositoryMockRecorder struct {
	mock *MockIRepository
}

// NewMockIRepository creates a new mock instance.
func NewMockIRepository(ctrl *gomock.Controller) *MockIRepository {
	mock := &MockIRepository{ctrl: ctrl}
	mock.recorder = &MockIRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRepository) EXPECT() *MockIRepositoryMockRecorder {
	return m.recorder
}

// GetParticipantGroupsByParticipant mocks base method.
func (m *MockIRepository) GetParticipantGroupsByParticipant(ctx context.Context, participant string) ([]model.ParticipantGroupModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetParticipantGroupsByParticipant", ctx, participant)
	ret0, _ := ret[0].([]model.ParticipantGroupModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetParticipantGroupsByParticipant indicates an expected call of GetParticipantGroupsByParticipant.
func (mr *MockIRepositoryMockRecorder) GetParticipantGroupsByParticipant(ctx, participant any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParticipantGroupsByParticipant", reflect.TypeOf((*MockIRepository)(nil).GetParticipantGroupsByParticipant), ctx, participant)
}

// GetRoomChatByParticipant mocks base method.
func (m *MockIRepository) GetRoomChatByParticipant(ctx context.Context, participant string, sessionStatus *string, initialChatNumber uint) ([]model.RoomChatModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoomChatByParticipant", ctx, participant, sessionStatus, initialChatNumber)
	ret0, _ := ret[0].([]model.RoomChatModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoomChatByParticipant indicates an expected call of GetRoomChatByParticipant.
func (mr *MockIRepositoryMockRecorder) GetRoomChatByParticipant(ctx, participant, sessionStatus, initialChatNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoomChatByParticipant", reflect.TypeOf((*MockIRepository)(nil).GetRoomChatByParticipant), ctx, participant, sessionStatus, initialChatNumber)
}

// GetRoomChatByParticipantGroups mocks base method.
func (m *MockIRepository) GetRoomChatByParticipantGroups(ctx context.Context, participantGroups []string, sessionStatus *string, initialChatNumber uint) ([]model.RoomChatModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoomChatByParticipantGroups", ctx, participantGroups, sessionStatus, initialChatNumber)
	ret0, _ := ret[0].([]model.RoomChatModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoomChatByParticipantGroups indicates an expected call of GetRoomChatByParticipantGroups.
func (mr *MockIRepositoryMockRecorder) GetRoomChatByParticipantGroups(ctx, participantGroups, sessionStatus, initialChatNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoomChatByParticipantGroups", reflect.TypeOf((*MockIRepository)(nil).GetRoomChatByParticipantGroups), ctx, participantGroups, sessionStatus, initialChatNumber)
}

// GetRoomChatBySessionId mocks base method.
func (m *MockIRepository) GetRoomChatBySessionId(ctx context.Context, sessionid string, sessionStatus *string, initialChatNumber uint) (*model.RoomChatModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoomChatBySessionId", ctx, sessionid, sessionStatus, initialChatNumber)
	ret0, _ := ret[0].(*model.RoomChatModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoomChatBySessionId indicates an expected call of GetRoomChatBySessionId.
func (mr *MockIRepositoryMockRecorder) GetRoomChatBySessionId(ctx, sessionid, sessionStatus, initialChatNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoomChatBySessionId", reflect.TypeOf((*MockIRepository)(nil).GetRoomChatBySessionId), ctx, sessionid, sessionStatus, initialChatNumber)
}
